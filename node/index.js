// file system √∂zelliklerini bu dosyada kullanbilecez
const fs = require('fs');
const http = require('http');
const url = require('url');
const replaceTemplate = require('./modules/replaceTemplate');

// Dosya Sistemi
//! Senkron > Blocking
//* Senkron ƒ∞≈ülemler sƒ±rayla ger√ßekle≈üir
//* Senk i≈ülemler bir i≈ülem tammalandƒ±ƒüƒ±nda diƒüer i≈ülem i√ßin beklemek zorunda kalƒ±r
//* bu nedenler tek bir i≈ülem i√ßin uzun s√ºre beklediimiz durumda t√ºm uygulama durabilir.
//* Dosya okuma veritabanƒ± sorgularƒ± gini senkron i≈ülemler
//* uygulmanƒ±n t√ºm√ºn√ºn bloke olmasƒ±na sebep olabilir

// Dosya Okuma
// const text = fs.readFileSync('./txt/input.txt', 'utf-8');

// // Dosya Yazma
// const newText = `Avakoda hakkƒ±nda edindiƒüim bilgiler:\n ${text}. \n Olu≈üturulma Tarihi: ${Date.now()}`;
// fs.writeFileSync('./txt/output.txt', newText);
// console.log('Dosya ba≈üarƒ±yla olu≈üturuldu');

//! ASenkron > NonBlocking
// * bu fonksiyon asenkron bir ≈üekilde soyayƒ± okumaya ba≈ülar
// * okumayƒ± bitirdiinde geri √ßaƒüƒ±rma (callback) fonk. √ßalƒ±≈ütƒ±rƒ±r
// fs.readFile('./txt/start.txt', 'utf-8', (err, fileName) => {
//   if (err) return console.log('HATA VAR!! üí•');
//   console.log('1.okuma i≈ülemi', fileName);
//   // ilk okumadan aldƒ±ƒüƒ±mƒ±z dosyayƒ± okuma
//   fs.readFile(`./txt/${fileName}.txt`, 'utf-8', (err, data) => {
//     console.log('2. okumdan elde eidldi', data);
//     // √º√ß√ºnc√º olarak yeni dosya olu≈ütur
//     fs.writeFile(`./txt/final.txt`, data, () => {
//       console.log('3. dosya yazma i≈ülemi sonlandƒ±');
//     });
//   });
// });

// console.log('Kullanƒ±cƒ± Giri≈ü √áƒ±kƒ±≈ü ƒ∞≈ülemleri');

//! Server
// routing > isteƒüin url'ine g√∂re ekrana farklƒ± i√ßerikler basma

// sayfa ≈üablonlarƒ±na eri≈üme
let tempOverview = fs.readFileSync(
  `${__dirname}/templates/template-overview.html`,
  'utf-8'
);
let tempCard = fs.readFileSync(
  `${__dirname}/templates/template-card.html`,
  'utf-8'
);
let tempProduct = fs.readFileSync(
  `${__dirname}/templates/template-product.html`,
  'utf-8'
);

// json formatƒ±
const data = fs.readFileSync(
  `${__dirname}/dev-data/data.json`,
  'utf-8'
);

// js de kullanaiblir format
const dataObj = JSON.parse(data);

// her istek atƒ±dƒüƒ±nda √ßalƒ±≈üƒ±cak fonk.
const server = http.createServer((req, res) => {
  // url'deki par√ßalara eri≈üme
  const { query, pathname } = url.parse(req.url, true);
  console.log(query.id, pathname);

  if (pathname === '/' || pathname === '/overview') {
    res.writeHead(200, {
      'Content-Type': 'text/html',
    });

    // meyvelerDizisi d√∂n ve her meyve i√ßin kart olu≈ütur
    const cardHtml = dataObj
      .map((el) => replaceTemplate(tempCard, el))
      .join('');

    // kartlar alanƒ±na olu≈ütudƒüumuz html'i ekleme
    const output = tempOverview.replace(
      '{%PRODUCT_CARDS%}',
      cardHtml
    );

    //* res.end >  d√∂nd√ºr√ºlecek cevabƒ± belirle
    res.end(output);
  } else if (pathname === '/product') {
    res.writeHead(200, {
      'Content-Type': 'text/html',
    });
    // urldeki id ye g√∂re √ºr√ºn√º bulma
    const product = dataObj[query.id];
    // template'i √ºr√ºne g√∂re ayarla
    const output = replaceTemplate(tempProduct, product);
    // client'e html'i g√∂nder
    res.end(output);
  } else if (pathname === '/api') {
    res.writeHead(200, {
      'Content-Type': 'application/json',
    });
    res.end(data);
  } else {
    // headerlerƒ± d√ºzenleme
    res.writeHead(404, {
      'Content-Type': 'text/html',
      Date: Date.now(),
    });
    res.end('<h1>Aradaginiz Sayfa Bulunamadi</h1>');
  }
});

// belirli porttan gelen istekleri dinlemeye ba≈ülatma
server.listen(8000, '127.0.0.1', () => {
  console.log('8000 port dinlemeye ba≈ülandƒ±');
});
